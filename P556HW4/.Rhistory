level <- allLevels[j]
lab_m1_curr <- as.numeric(pos_m1 >= level)
lab_m2_curr <- as.numeric(pos_m2 >= level)
truePos_m1 <- sum(lab_m1_curr == 1 & posLab) / numPos
truePos_m2 <- sum(lab_m2_curr == 1 & posLab) / numPos
falsePos_m1 <- sum(lab_m1_curr == 1 & negLab) / numNeg
falsePos_m2 <- sum(lab_m2_curr == 1 & negLab) / numNeg
m1_pts[j,] <- c(falsePos_m1, truePos_m1, level)
m2_pts[j,] <- c(falsePos_m2, truePos_m2, level)
}
points(m1_pts[,1:2],
col = "steelblue2",
pch = 19)
lines(m1_pts[,1:2],
col = "steelblue2",
lty = 1,
lwd = 2)
points(m2_pts[,1:2],
col = "orange",
pch = 19)
lines(m2_pts[,1:2],
col = "orange",
lty = 1,
lwd = 2)
lines(cbind(c(-0.5,1.5), c(-0.5,1.5)),
lty = 2,
col = "gray")
legend(0.8, 0.2,
c("M1", "M2"),
lty = c(1, 1),
lwd = c(2, 2),
col = c("steelblue2", "orange"))
# ProbEC.R: Draw the ROC curve for the given data set
pos_m1 <- c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
pos_m2 <- c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
trueClass <- c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
posLab <- trueClass == 1
numPos <- sum(posLab)
negLab <- trueClass == 0
numNeg <- sum(negLab)
plot(0, 0,
main = "ROC Curve",
xlim = c(0, 1),
ylim = c(0, 1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
# allLevels <- sort(c(pos_m1, pos_m2, 0, 1))
allLevels <- 1 - c(1, 0.645, 0.53, 0.415, 0.345, 0.2, 0.07, 0.045, 0.035, 0.02, 0)
numLevels <- length(allLevels)
m1_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
m2_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
names(m1_pts) <- c("FP", "TP", "Level")
names(m2_pts) <- c("FP", "TP", "Level")
for (j in 1:numLevels) {
level <- allLevels[j]
lab_m1_curr <- as.numeric(pos_m1 >= level)
lab_m2_curr <- as.numeric(pos_m2 >= level)
truePos_m1 <- sum(lab_m1_curr == 1 & posLab) / numPos
truePos_m2 <- sum(lab_m2_curr == 1 & posLab) / numPos
falsePos_m1 <- sum(lab_m1_curr == 1 & negLab) / numNeg
falsePos_m2 <- sum(lab_m2_curr == 1 & negLab) / numNeg
m1_pts[j,] <- c(falsePos_m1, truePos_m1, level)
m2_pts[j,] <- c(falsePos_m2, truePos_m2, level)
}
points(m1_pts[,1:2],
col = "steelblue2",
pch = 19)
lines(m1_pts[,1:2],
col = "steelblue2",
lty = 1,
lwd = 2)
points(m2_pts[,1:2],
col = "orange",
pch = 19)
lines(m2_pts[,1:2],
col = "orange",
lty = 1,
lwd = 2)
lines(cbind(c(-0.5,1.5), c(-0.5,1.5)),
lty = 2,
col = "gray")
legend(0.8, 0.2,
c("M1", "M2"),
lty = c(1, 1),
lwd = c(2, 2),
col = c("steelblue2", "orange"))
roc_res <- roc(response = trueClass, predictor = pos_m2)
plot(roc_res)
# ProbEC.R: Draw the ROC curve for the given data set
pos_m1 <- c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
pos_m2 <- c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
trueClass <- c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
posLab <- trueClass == 1
numPos <- sum(posLab)
negLab <- trueClass == 0
numNeg <- sum(negLab)
plot(0, 0,
main = "ROC Curve",
xlim = c(0, 1),
ylim = c(0, 1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
# allLevels <- sort(c(pos_m1, pos_m2, 0, 1))
allLevels <- 1 - c(1, 0.645, 0.53, 0.415, 0.345, 0.2, 0.07, 0.045, 0.035, 0.02, 0)
numLevels <- length(allLevels)
m1_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
m2_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
names(m1_pts) <- c("FP", "TP", "Level")
names(m2_pts) <- c("FP", "TP", "Level")
for (j in 1:numLevels) {
level <- allLevels[j]
lab_m1_curr <- as.numeric(pos_m1 >= level)
lab_m2_curr <- as.numeric(pos_m2 >= level)
truePos_m1 <- sum(lab_m1_curr == 1 & posLab) / numPos
truePos_m2 <- sum(lab_m2_curr == 1 & posLab) / numPos
falsePos_m1 <- sum(lab_m1_curr == 1 & negLab) / numNeg
falsePos_m2 <- sum(lab_m2_curr == 1 & negLab) / numNeg
m1_pts[j,] <- c(falsePos_m1, truePos_m1, level)
m2_pts[j,] <- c(falsePos_m2, truePos_m2, level)
}
points(m1_pts[,1:2],
col = "steelblue2",
pch = 19)
lines(m1_pts[,1:2],
col = "steelblue2",
lty = 1,
lwd = 2)
points(m2_pts[,1:2],
col = "orange",
pch = 19)
lines(m2_pts[,1:2],
col = "orange",
lty = 1,
lwd = 2)
lines(cbind(c(-0.5,1.5), c(-0.5,1.5)),
lty = 2,
col = "gray")
legend(0.8, 0.2,
c("M1", "M2"),
lty = c(1, 1),
lwd = c(2, 2),
col = c("steelblue2", "orange"))
cbind(1 - roc_res$specificities, roc_res$sensitivities)
cbind(1 - roc_res$specificities, roc_res$sensitivities, roc_res$thresholds)
# ProbEC.R: Draw the ROC curve for the given data set
pos_m1 <- c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
pos_m2 <- c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
trueClass <- c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
posLab <- trueClass == 1
numPos <- sum(posLab)
negLab <- trueClass == 0
numNeg <- sum(negLab)
plot(0, 0,
main = "ROC Curve",
xlim = c(0, 1),
ylim = c(0, 1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
allLevels <- sort(c(pos_m1, pos_m2, 0, 1))
#allLevels <- 1 - c(1, 0.645, 0.53, 0.415, 0.345, 0.2, 0.07, 0.045, 0.035, 0.02, 0)
numLevels <- length(allLevels)
m1_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
m2_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
names(m1_pts) <- c("FP", "TP", "Level")
names(m2_pts) <- c("FP", "TP", "Level")
for (j in 1:numLevels) {
level <- allLevels[j]
lab_m1_curr <- as.numeric(pos_m1 >= level)
lab_m2_curr <- as.numeric(pos_m2 >= level)
truePos_m1 <- sum(lab_m1_curr == 1 & posLab) / numPos
truePos_m2 <- sum(lab_m2_curr == 1 & posLab) / numPos
falsePos_m1 <- sum(lab_m1_curr == 1 & negLab) / numNeg
falsePos_m2 <- sum(lab_m2_curr == 1 & negLab) / numNeg
m1_pts[j,] <- c(falsePos_m1, truePos_m1, level)
m2_pts[j,] <- c(falsePos_m2, truePos_m2, level)
}
points(m1_pts[,1:2],
col = "steelblue2",
pch = 19)
lines(m1_pts[,1:2],
col = "steelblue2",
lty = 1,
lwd = 2)
points(m2_pts[,1:2],
col = "orange",
pch = 19)
lines(m2_pts[,1:2],
col = "orange",
lty = 1,
lwd = 2)
lines(cbind(c(-0.5,1.5), c(-0.5,1.5)),
lty = 2,
col = "gray")
legend(0.8, 0.2,
c("M1", "M2"),
lty = c(1, 1),
lwd = c(2, 2),
col = c("steelblue2", "orange"))
library(pROC)
roc_res <- roc(response = trueClass, predictor = pos_m2)
plot(roc_res)
# ProbEC.R: Draw the ROC curve for the given data set
pos_m1 <- c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
pos_m2 <- c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
trueClass <- c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
posLab <- trueClass == 1
numPos <- sum(posLab)
negLab <- trueClass == 0
numNeg <- sum(negLab)
plot(0, 0,
main = "ROC Curve",
xlim = c(0, 1),
ylim = c(0, 1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
allLevels <- sort(c(pos_m1, pos_m2, 0, 1))
#allLevels <- 1 - c(1, 0.645, 0.53, 0.415, 0.345, 0.2, 0.07, 0.045, 0.035, 0.02, 0)
numLevels <- length(allLevels)
m1_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
m2_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
names(m1_pts) <- c("FP", "TP", "Level")
names(m2_pts) <- c("FP", "TP", "Level")
for (j in 1:numLevels) {
level <- allLevels[j]
lab_m1_curr <- as.numeric(pos_m1 >= level)
lab_m2_curr <- as.numeric(pos_m2 >= level)
truePos_m1 <- sum(lab_m1_curr == 1 & posLab) / numPos
truePos_m2 <- sum(lab_m2_curr == 1 & posLab) / numPos
falsePos_m1 <- sum(lab_m1_curr == 1 & negLab) / numNeg
falsePos_m2 <- sum(lab_m2_curr == 1 & negLab) / numNeg
m1_pts[j,] <- c(falsePos_m1, truePos_m1, level)
m2_pts[j,] <- c(falsePos_m2, truePos_m2, level)
}
points(m1_pts[,1:2],
col = "steelblue2",
pch = 19)
lines(m1_pts[,1:2],
col = "steelblue2",
lty = 1,
lwd = 2)
points(m2_pts[,1:2],
col = "orange",
pch = 19)
lines(m2_pts[,1:2],
col = "orange",
lty = 1,
lwd = 2)
lines(cbind(c(-0.5,1.5), c(-0.5,1.5)),
lty = 2,
col = "gray")
legend(0.8, 0.2,
c("M1", "M2"),
lty = c(1, 1),
lwd = c(2, 2),
col = c("steelblue2", "orange"))
roc_res <- roc(response = trueClass, predictor = pos_m2)
plot(roc_res)
cat(roc_res$thresholds, sep = ", ")
cbind(1 - roc_res$specificities, roc_res$sensitivities, roc_res$thresholds)
roc
UseMethod("roc")
# ProbEC.R: Draw the ROC curve for the given data set
pos_m1 <- c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
pos_m2 <- c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
trueClass <- c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
posLab <- trueClass == 1
numPos <- sum(posLab)
negLab <- trueClass == 0
numNeg <- sum(negLab)
plot(0, 0,
main = "ROC Curve",
xlim = c(0, 1),
ylim = c(0, 1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
allLevels <- sort(c(pos_m1, pos_m2, 0, 1))
#allLevels <- 1 - c(1, 0.645, 0.53, 0.415, 0.345, 0.2, 0.07, 0.045, 0.035, 0.02, 0)
numLevels <- length(allLevels)
m1_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
m2_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
names(m1_pts) <- c("FP", "TP", "Level")
names(m2_pts) <- c("FP", "TP", "Level")
for (j in 1:numLevels) {
level <- allLevels[j]
lab_m1_curr <- as.numeric(pos_m1 >= level)
lab_m2_curr <- as.numeric(pos_m2 <= level)
truePos_m1 <- sum(lab_m1_curr == 1 & posLab) / numPos
truePos_m2 <- sum(lab_m2_curr == 1 & posLab) / numPos
falsePos_m1 <- sum(lab_m1_curr == 1 & negLab) / numNeg
falsePos_m2 <- sum(lab_m2_curr == 1 & negLab) / numNeg
m1_pts[j,] <- c(falsePos_m1, truePos_m1, level)
m2_pts[j,] <- c(falsePos_m2, truePos_m2, level)
}
points(m1_pts[,1:2],
col = "steelblue2",
pch = 19)
lines(m1_pts[,1:2],
col = "steelblue2",
lty = 1,
lwd = 2)
points(m2_pts[,1:2],
col = "orange",
pch = 19)
lines(m2_pts[,1:2],
col = "orange",
lty = 1,
lwd = 2)
lines(cbind(c(-0.5,1.5), c(-0.5,1.5)),
lty = 2,
col = "gray")
legend(0.8, 0.2,
c("M1", "M2"),
lty = c(1, 1),
lwd = c(2, 2),
col = c("steelblue2", "orange"))
# ProbEC.R: Draw the ROC curve for the given data set
pos_m1 <- c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
pos_m2 <- c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
trueClass <- c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
posLab <- trueClass == 1
numPos <- sum(posLab)
negLab <- trueClass == 0
numNeg <- sum(negLab)
plot(0, 0,
main = "ROC Curve",
xlim = c(0, 1),
ylim = c(0, 1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
allLevels <- sort(c(pos_m1, pos_m2, 0, 1))
#allLevels <- 1 - c(1, 0.645, 0.53, 0.415, 0.345, 0.2, 0.07, 0.045, 0.035, 0.02, 0)
numLevels <- length(allLevels)
m1_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
m2_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
names(m1_pts) <- c("FP", "TP", "Level")
names(m2_pts) <- c("FP", "TP", "Level")
for (j in 1:numLevels) {
level <- allLevels[j]
lab_m1_curr <- as.numeric(pos_m1 <= level)
lab_m2_curr <- as.numeric(pos_m2 <= level)
truePos_m1 <- sum(lab_m1_curr == 1 & posLab) / numPos
truePos_m2 <- sum(lab_m2_curr == 1 & posLab) / numPos
falsePos_m1 <- sum(lab_m1_curr == 1 & negLab) / numNeg
falsePos_m2 <- sum(lab_m2_curr == 1 & negLab) / numNeg
m1_pts[j,] <- c(falsePos_m1, truePos_m1, level)
m2_pts[j,] <- c(falsePos_m2, truePos_m2, level)
}
points(m1_pts[,1:2],
col = "steelblue2",
pch = 19)
lines(m1_pts[,1:2],
col = "steelblue2",
lty = 1,
lwd = 2)
points(m2_pts[,1:2],
col = "orange",
pch = 19)
lines(m2_pts[,1:2],
col = "orange",
lty = 1,
lwd = 2)
lines(cbind(c(-0.5,1.5), c(-0.5,1.5)),
lty = 2,
col = "gray")
legend(0.8, 0.2,
c("M1", "M2"),
lty = c(1, 1),
lwd = c(2, 2),
col = c("steelblue2", "orange"))
# ProbEC.R: Draw the ROC curve for the given data set
pos_m1 <- c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
pos_m2 <- c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
trueClass <- c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
posLab <- trueClass == 1
numPos <- sum(posLab)
negLab <- trueClass == 0
numNeg <- sum(negLab)
plot(0, 0,
main = "ROC Curve",
xlim = c(0, 1),
ylim = c(0, 1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
allLevels <- sort(c(pos_m1, pos_m2, 0, 1))
#allLevels <- 1 - c(1, 0.645, 0.53, 0.415, 0.345, 0.2, 0.07, 0.045, 0.035, 0.02, 0)
numLevels <- length(allLevels)
m1_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
m2_pts <- data.frame(matrix(0, nrow = numLevels, ncol = 3))
names(m1_pts) <- c("FP", "TP", "Level")
names(m2_pts) <- c("FP", "TP", "Level")
for (j in 1:numLevels) {
level <- allLevels[j]
lab_m1_curr <- as.numeric(pos_m1 >= level)
lab_m2_curr <- as.numeric(pos_m2 >= level)
truePos_m1 <- sum(lab_m1_curr == 1 & posLab) / numPos
truePos_m2 <- sum(lab_m2_curr == 1 & posLab) / numPos
falsePos_m1 <- sum(lab_m1_curr == 1 & negLab) / numNeg
falsePos_m2 <- sum(lab_m2_curr == 1 & negLab) / numNeg
m1_pts[j,] <- c(falsePos_m1, truePos_m1, level)
m2_pts[j,] <- c(falsePos_m2, truePos_m2, level)
}
points(m1_pts[,1:2],
col = "steelblue2",
pch = 19)
lines(m1_pts[,1:2],
col = "steelblue2",
lty = 1,
lwd = 2)
points(m2_pts[,1:2],
col = "orange",
pch = 19)
lines(m2_pts[,1:2],
col = "orange",
lty = 1,
lwd = 2)
lines(cbind(c(-0.5,1.5), c(-0.5,1.5)),
lty = 2,
col = "gray")
legend(0.8, 0.2,
c("M1", "M2"),
lty = c(1, 1),
lwd = c(2, 2),
col = c("steelblue2", "orange"))
roc_res <- roc(response = trueClass, predictor = pos_m2, direction = >)
roc_res <- roc(response = trueClass, predictor = pos_m2, direction = ">")
plot(roc_res)
roc_res <- roc(response = trueClass, predictor = pos_m2, direction = "<")
plot(roc_res)
plot(roc(response = trueClass, predictor = pos_m1, direction = "<"))
rm(list = ls())
setwd("/Users/chuckjia/Documents/Workspace/RStudio/P556-AppliedML-Fall2017/P556HW4")
cat("\014")  # Clear screen
library(dummies)
library(class)
library(naivebayes)
library(Hmisc)
library(mvtnorm)
library(knncat)
cat("\014")  # Clear screen
err_NBC_iono <- c(0.08571429, 0.07142857, 0.08571429, 0.05714286, 0.05633803)
err_RNBC_iono <- c(0.1142857, 0.1142857, 0.1285714, 0.1142857, 0.05633803)
err_NBC_car <- c(0.1184971, 0.1127168, 0.1589595, 0.1098266, 0.1482558)
err_RNBC_car <- c(0.1358382, 0.132948, 0.1589595, 0.1156069, 0.1686047)
err_NBC_crx <- c(0.1594203, 0.1449275, 0.0942029, 0.1376812, 0.1594203)
err_RNBC_crx <- c(0.2318841, 0.2173913, 0.1884058, 0.2753623, 0.2608696)
mean(err_NBC_iono)
mean(err_NBC_car)
mean(err_NBC_crx)
# Prob4.R: Plotting results from KNN and Naive Bayes for comparison
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Line and dot plots
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
rm(list = ls())
numFold <- 5
# cat(errAll_KNN_Iono_1norm[,1], sep = ", ")
# cat(errAll_KNN_Car_1norm[,1], sep = ", ")
# cat(errAll_KNN_Crx_1norm[,13], sep = ", ")
err_KNN_iono_k1 <- c(0.08571429, 0.1, 0.05714286, 0.1, 0.07042254)
err_KNN_car_k1 <- c(0.09537572, 0.06647399, 0.06936416, 0.05202312, 0.05523256)
err_KNN_crx_k13 <- c(0.1521739, 0.1521739, 0.1014493, 0.1014493, 0.1521739)
err_NBC_iono <- c(0.08571429, 0.07142857, 0.08571429, 0.05714286, 0.05633803)
err_NBC_car <- c(0.1184971, 0.1127168, 0.1589595, 0.1098266, 0.1482558)
err_NBC_crx <- c(0.1594203, 0.1449275, 0.0942029, 0.1376812, 0.1594203)
err_KNN_iono_k1 <- cbind(1:numFold, err_KNN_iono_k1)
err_KNN_car_k1 <- cbind(1:numFold, err_KNN_car_k1)
err_KNN_crx_k13 <- cbind(1:numFold, err_KNN_crx_k13)
err_NBC_iono <- cbind(1:numFold, err_NBC_iono)
err_NBC_car <- cbind(1:numFold, err_NBC_car)
err_NBC_crx <- cbind(1:numFold, err_NBC_crx)
cat("\014")
title <- "Errors for Ionosphere Set"
err_KNN <- err_KNN_iono_k1
err_NBC <- err_NBC_iono
yRange <- c(0, 0.25)
source("Prob4-Plot_Helper.R")
title <- "Errors for Ionosphere Set"
err_KNN <- err_KNN_iono_k1
err_NBC <- err_NBC_iono
yRange <- c(0, 0.25)
source("Prob4-Plot_Helper.R")
title <- "Errors for Ionosphere Set"
err_KNN <- err_KNN_iono_k1
err_NBC <- err_NBC_iono
yRange <- c(0, 0.25)
source("Prob4-Plot_Helper.R")
title <- "Errors for Ionosphere Set"
err_KNN <- err_KNN_iono_k1
err_NBC <- err_NBC_iono
yRange <- c(0, 0.25)
source("Prob4-Plot_Helper.R")
title <- "Errors for Ionosphere Set"
err_KNN <- err_KNN_iono_k1
err_NBC <- err_NBC_iono
yRange <- c(0, 0.25)
source("Prob4-Plot_Helper.R")
title <- "Errors for Car Set"
err_KNN <- err_KNN_car_k1
err_NBC <- err_NBC_car
yRange <- c(0, 0.25)
source("Prob4-Plot_Helper.R")
title <- "Errors for Crx Set"
err_KNN <- err_KNN_crx_k1
err_NBC <- err_NBC_crx
yRange <- c(0, 0.25)
source("Prob4-Plot_Helper.R")
title <- "Errors for Crx Set"
err_KNN <- err_KNN_crx_k13
err_NBC <- err_NBC_crx
yRange <- c(0, 0.25)
source("Prob4-Plot_Helper.R")
2/7
rm(list = ls())
