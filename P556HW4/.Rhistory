lines(log_res_wo_wTopBD, col = "darkorchid4", lwd = 1.7)
library(ISLR)
Smarket
tail(Smarket)
tail(Smarket$Year)
Smarket$Year
unique(Smarket$Year)
unique(Weekly$Year)
tail(Weekly)
tr_feat <- subset(Weekly, select = Lag2)
tr_resp <- subset(Weekly, select = Direction)
tr_resp
tr_feat[Weekly$Year <= 2008,]
tr_feat
Weekly$Year
tr_feat[Weekly$Year <= 2008,]
vld_feat <- tr_feat[Weekly$Year >= 2009,]
tr_feat <- tr_feat[Weekly$Year <= 2008,]
rm(list = ls())
setwd("/Users/chuckjia/Desktop/P556HW4")
library(dummies)
library(class)
library(naivebayes)
library(Hmisc)
cat("\014")  # Clear screen
rm(list = ls())
setwd("/Users/chuckjia/Desktop/P556HW4")
library(dummies)
library(class)
library(naivebayes)
library(Hmisc)
cat("\014")  # Clear screen
rm(list = ls())
library(ISLR)
tr_feat <- subset(Weekly, select = Lag2)
vld_feat <- tr_feat[Weekly$Year >= 2009,]
tr_feat <- tr_feat[Weekly$Year <= 2008,]
tr_resp <- subset(Weekly, select = Direction)
vld_resp <- tr_resp[Weekly$Year >= 2009,]
tr_resp <- tr_resp[Weekly$Year <= 2008,]
cat("\014")  # Clear screen
?knn
knn(train = tr_feat, test = vld_feat, tr_resp, k = 1)
knn(train = tr_feat, test = vld_feat, cl = tr_resp, k = 1)
tr_feat
rm(list = ls())
library(ISLR)
tr_feat <- subset(Weekly, select = Lag2)
vld_feat <- data.frame(matrix(tr_feat[Weekly$Year >= 2009,], ncol = 1))
tr_feat <-  data.frame(matrix(tr_feat[Weekly$Year <= 2008,], ncol = 1))
tr_resp <- subset(Weekly, select = Direction)
vld_resp <- data.frame(matrix(tr_resp[Weekly$Year >= 2009,], ncol = 1))
tr_resp <- data.frame(matrix(tr_resp[Weekly$Year <= 2008,], ncol = 1))
knn(train = tr_feat, test = vld_feat, cl = tr_resp, k = 1)
rm(list = ls())
library(ISLR)
tr_feat <- subset(Weekly, select = Lag2)
vld_feat <- data.frame(matrix(tr_feat[Weekly$Year >= 2009,], ncol = 1))
tr_feat <-  data.frame(matrix(tr_feat[Weekly$Year <= 2008,], ncol = 1))
tr_resp <- subset(Weekly, select = Direction)
vld_resp <- data.frame(matrix(tr_resp[Weekly$Year >= 2009,], ncol = 1))
tr_resp <- tr_resp[Weekly$Year <= 2008,]
knn(train = tr_feat, test = vld_feat, cl = tr_resp, k = 1)
knn_res <- knn(train = tr_feat, test = vld_feat, cl = tr_resp, k = 1)
vld_pred <- predict(knn_res, vld_feat)
rm(list = ls())
library(ISLR)
tr_feat <- subset(Weekly, select = Lag2)
vld_feat <- data.frame(matrix(tr_feat[Weekly$Year >= 2009,], ncol = 1))
tr_feat <-  data.frame(matrix(tr_feat[Weekly$Year <= 2008,], ncol = 1))
tr_resp <- subset(Weekly, select = Direction)
vld_resp <- data.frame(matrix(tr_resp[Weekly$Year >= 2009,], ncol = 1))
tr_resp <- tr_resp[Weekly$Year <= 2008,]
vld_pred <- knn(train = tr_feat, test = vld_feat, cl = tr_resp, k = 1)
TP <- vld_pred == "Up" & vld_resp == "Up"
numTP <- sum(TP)
rm(list = ls())
library(ISLR)
tr_feat <- subset(Weekly, select = Lag2)
vld_feat <- data.frame(matrix(tr_feat[Weekly$Year >= 2009,], ncol = 1))
tr_feat <-  data.frame(matrix(tr_feat[Weekly$Year <= 2008,], ncol = 1))
tr_resp <- subset(Weekly, select = Direction)
vld_resp <- data.frame(matrix(tr_resp[Weekly$Year >= 2009,], ncol = 1))
tr_resp <- tr_resp[Weekly$Year <= 2008,]
vld_pred <- knn(train = tr_feat, test = vld_feat, cl = tr_resp, k = 1)
TP <- vld_pred == "Up" & vld_resp == "Up"
numTP <- sum(TP)
TN <- vld_pred == "Down" & vld_resp == "Down"
numTN <- sum(TN)
rm(list = ls())
library(ISLR)
tr_feat <- subset(Weekly, select = Lag2)
vld_feat <- data.frame(matrix(tr_feat[Weekly$Year >= 2009,], ncol = 1))
tr_feat <-  data.frame(matrix(tr_feat[Weekly$Year <= 2008,], ncol = 1))
tr_resp <- subset(Weekly, select = Direction)
vld_resp <- data.frame(matrix(tr_resp[Weekly$Year >= 2009,], ncol = 1))
tr_resp <- tr_resp[Weekly$Year <= 2008,]
vld_pred <- knn(train = tr_feat, test = vld_feat, cl = tr_resp, k = 1)
TP <- vld_pred == "Up" & vld_resp == "Up"
numTP <- sum(TP)
FP <- vld_pred == "Up" & vld_resp == "Down"
numFP <- sum(FP)
TN <- vld_pred == "Down" & vld_resp == "Down"
numTN <- sum(TN)
FN <- vld_pred == "Down" & vld_resp == "Up"
numFN <- sum(FN)
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Create k-fold files
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
numFold <- 5
data_set_name <- "ionosphere"
# data_set_name <- "car"
# data_set_name <- "crx"
set.seed(20)
# Read data set from file
data_set <- read.table(paste("Data/", data_set_name, ".data", sep = ""),
sep = ",", stringsAsFactors = F)
# Create train and validation files
source("Prob1-CreateFiles.R")
rm(list = ls())
setwd("/Users/chuckjia/Desktop/P556HW4")
library(dummies)
library(class)
library(naivebayes)
library(Hmisc)
cat("\014")  # Clear screen
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Create k-fold files
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
numFold <- 5
data_set_name <- "ionosphere"
# data_set_name <- "car"
# data_set_name <- "crx"
set.seed(20)
# Read data set from file
data_set <- read.table(paste("Data/", data_set_name, ".data", sep = ""),
sep = ",", stringsAsFactors = F)
# Create train and validation files
source("Prob1-CreateFiles.R")
numData <- nrow(data_set)
numData_eachFold <- round(numData / numFold)
label <- 1:numData  # Used in the random sampling for each set
all_index <- 1:numData
for (foldNo in 1:(numFold - 1)) {
valid_ind <- sort(sample(label, size = numData_eachFold, replace = F))
label <- setdiff(label, valid_ind)
source("Prob1-CreateFiles_Helper.R")
}
foldNo <- numFold
valid_ind <- label
source("Prob1-CreateFiles-Helper.R")
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Create k-fold files
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
numFold <- 5
data_set_name <- "ionosphere"
# data_set_name <- "car"
# data_set_name <- "crx"
set.seed(20)
# Read data set from file
data_set <- read.table(paste("Data/", data_set_name, ".data", sep = ""),
sep = ",", stringsAsFactors = F)
# Create train and validation files
source("Prob1-CreateFiles.R")
rm(numData, numData_eachFold, label, all_index, foldNo, valid_ind)
rm(tr_data, vld_data)
rm(list = ls())
setwd("/Users/chuckjia/Desktop/P556HW4")
library(dummies)
library(class)
library(naivebayes)
library(Hmisc)
cat("\014")  # Clear screen
# Prob1-Commands.R: Create k-fold validation files
# This is the wrapper file for all the methods and scripts in problem 1
# Settings
set.seed(20)
numFold <- 5
data_set_name <- "ionosphere"
# data_set_name <- "car"
# data_set_name <- "crx"
# Read data set from file
filename <- paste("Data/", data_set_name, ".data", sep = "")
data_set <- read.table(filename, sep = ",", stringsAsFactors = F)
# Create train and validation files
source("Prob1-CreateFiles.R")
rm(filename)
rm(list = ls()); cat("\014")  # Clear screen
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"
# data_set_name <- "car";
# data_set_name <- "crx"
# title <- "Errors from Car Set with 1-norm as Distance Function"
title <- "Errors from Car Set Using Built-in KNN Method in R"
numFold <- 5
numNeighbor <- 2
numNeighbor
foldNo <- 1
# Perform KNN algorithm on k-fold cross-validation data sets
folderPath <- "Data/KFold_KNN/"
source("Prob1-ReadKFold.R")
tr_feat <- tr_feat_list[[foldNo]]
vld_feat <- vld_feat_list[[foldNo]]
tr_resp <- tr_resp_list[[foldNo]]
vld_resp <- vld_resp_list[[foldNo]]
numData_vld <- nrow(vld_feat)
vld_pred <- data.frame(matrix(NA, ncol = 1, nrow = numData_vld))
names(vld_pred) <- names(vld_resp)
row.names(vld_pred) <- row.names(vld_resp)
allDist <- sort(rowSums(abs(
scale(tr_feat, center = as.numeric(dataPt), scale = F)
)))
j = 1
dataPt <- vld_feat[j,]
source("Prob2-KNN-CalcDist-1Norm-Helper.R")
allDist
cand_names <- names(allDist[1:(numNeighbor - 1)])
cand_names
names(allDist)[allDist == allDist[numNeighbor]]
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"
numFold <- 5
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"
# data_set_name <- "car";
# data_set_name <- "crx"
# title <- "Errors from Car Set with 1-norm as Distance Function"
title <- "Errors from Car Set Using Built-in KNN Method in R"
numFold <- 5
numNeighbor <- 2
# Prob2-KNN: Perform KNN algorithm on k-fold cross-validation data sets
# Read data sets from file
folderPath <- "Data/KFold_KNN/"
source("Prob1-ReadKFold.R")
err_KNN <- array(0, dim = numFold)
foldNo <- 1
tr_feat <- tr_feat_list[[foldNo]]
vld_feat <- vld_feat_list[[foldNo]]
tr_resp <- tr_resp_list[[foldNo]]
vld_resp <- vld_resp_list[[foldNo]]
numData_vld <- nrow(vld_feat)
vld_pred <- data.frame(matrix(NA, ncol = 1, nrow = numData_vld))
names(vld_pred) <- names(vld_resp)
row.names(vld_pred) <- row.names(vld_resp)
j <- 1
dataPt <- vld_feat[j,]
dataPt
source("Prob2-KNN_Helper-CalcDist-1Norm.R")
allDist
cand_names <- names(allDist)[allDist <= allDist[numNeighbor]]
freqTable <- table(tr_resp[cand_names,])
freqTable
vld_pred[j,] <- names(freqTable)[which.max(freqTable)]
vld_pred[j,]
source("Prob2-KNN.R")
numNeighbor <- 2
source("Prob2-KNN.R")
rm(list = ls()); cat("\014")  # Clear screen
# data_set_name <- "ionosphere"
data_set_name <- "car";
# data_set_name <- "crx"
numNeighbor <- 2
numFold <- 5
source("Prob2-KNN.R")
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"
# data_set_name <- "car";
# data_set_name <- "crx"
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
errAll_KNN <- data.frame(matrix(0, nrow = length(neighborRange), ncol = numFold))
row.names(errAll_KNN) <- neighborRange
for (numNeighbor in neighborRange) {
# source("Prob2-KNN-MajorVoting.R")
source("Prob2-R_KNN.R")
errAll_KNN[numNeighbor - neighborRange[1] + 1,] <- err_KNN
}
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"
# data_set_name <- "car";
# data_set_name <- "crx"
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
errAll_KNN <- data.frame(matrix(0, nrow = length(neighborRange), ncol = numFold))
row.names(errAll_KNN) <- neighborRange
for (numNeighbor in neighborRange) {
# source("Prob2-KNN-MajorVoting.R")
source("Prob2-R_KNN.R")
errAll_KNN[numNeighbor - neighborRange[1] + 1,] <- err_KNN
}
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"
# data_set_name <- "car";
# data_set_name <- "crx"
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
errAll_KNN <- data.frame(matrix(0, nrow = length(neighborRange), ncol = numFold))
row.names(errAll_KNN) <- neighborRange
for (numNeighbor in neighborRange) {
source("Prob2-KNN-MajorVoting.R")
# source("Prob2-R_KNN.R")
errAll_KNN[numNeighbor - neighborRange[1] + 1,] <- err_KNN
}
errAll_KNN <- data.frame(matrix(0, nrow = length(neighborRange), ncol = numFold))
row.names(errAll_KNN) <- neighborRange
for (numNeighbor in neighborRange) {
# source("Prob2-KNN-MajorVoting.R")
source("Prob2-R_KNN.R")
errAll_KNN[numNeighbor - neighborRange[1] + 1,] <- err_KNN
}
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"
# data_set_name <- "car";
# data_set_name <- "crx"
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"  # ionosphere | car | crx
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
errAll_KNN <- data.frame(matrix(0, nrow = length(neighborRange), ncol = numFold))
row.names(errAll_KNN) <- neighborRange
for (numNeighbor in neighborRange) {
# source("Prob2-KNN-MajorVoting.R")
source("Prob2-R_KNN.R")
errAll_KNN[numNeighbor - neighborRange[1] + 1,] <- err_KNN
}
errAll_KNN <- data.frame(matrix(0, nrow = length(neighborRange), ncol = numFold))
row.names(errAll_KNN) <- neighborRange
for (numNeighbor in neighborRange) {
source("Prob2-KNN-MajorVoting.R")
# source("Prob2-R_KNN.R")
errAll_KNN[numNeighbor - neighborRange[1] + 1,] <- err_KNN
}
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"  # ionosphere | car | crx
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
errAll_KNN <- data.frame(matrix(0, nrow = length(neighborRange), ncol = numFold))
row.names(errAll_KNN) <- neighborRange
for (numNeighbor in neighborRange) {
source("Prob2-KNN-MajorVoting.R")
# source("Prob2-R_KNN.R")
errAll_KNN[numNeighbor - neighborRange[1] + 1,] <- err_KNN
}
errAll_KNN <- data.frame(matrix(0, nrow = length(neighborRange), ncol = numFold))
row.names(errAll_KNN) <- neighborRange
for (numNeighbor in neighborRange) {
# source("Prob2-KNN-MajorVoting.R")
source("Prob2-R_KNN.R")
errAll_KNN[numNeighbor - neighborRange[1] + 1,] <- err_KNN
}
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"  # ionosphere | car | crx
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
source("Prob2-KNN_Wrapper.R")
# Prob2-Commands.R: This script implements the KNN method and plot the errors
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
rm(list = ls()); cat("\014")  # Clear screen
data_set_name <- "ionosphere"  # ionosphere | car | crx
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
rm(list = ls())
data_set_name <- "ionosphere"  # ionosphere | car | crx
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
cat("\014")
source("Prob2-KNN_Wrapper.R")
source("Prob2-Plots.R")
source("Prob2-KNN_Wrapper.R")
source("Prob2-Plots.R")
tr_resp[cand_names,]
# Read data sets from file
folderPath <- "Data/KFold_KNN/"
source("Prob1-ReadKFold.R")
err_vec <- array(0, dim = numFold)
foldNo
foldNo
foldNo <- 1
tr_feat <- tr_feat_list[[foldNo]]
vld_feat <- vld_feat_list[[foldNo]]
tr_resp <- tr_resp_list[[foldNo]]
vld_resp <- vld_resp_list[[foldNo]]
numData_vld <- nrow(vld_feat)
vld_pred <- data.frame(matrix(NA, ncol = 1, nrow = numData_vld))
names(vld_pred) <- names(vld_resp)
row.names(vld_pred) <- row.names(vld_resp)
j = 2
dataPt <- vld_feat[j,]
source("Prob2-KNN_Helper-CalcDist-1Norm.R")
cand_names <- names(allDist)[allDist <= allDist[numNeighbor]]
numCand <- length(cand_names)
cand_resp <- tr_resp[cand_names,]
cand_feat <- tr_feat[cand_names,]
uniqVal_cand <- unique(cand_resp)
numUniqVal_cand <- length(uniqVal_cand)
cand_scores <- data.frame(matrix(0, nrow = 1, ncol = numUniqVal_cand))
names(cand_scores) <- uniqVal_cand
tr_resp[cand_names,]
cand_names
candName <- "49"
tr_resp[candName,]
cand_scores[,tr_resp[candName,]]
cand_scores
cand_scores[,tr_resp[candName,]] <- w + cand_scores[,tr_resp[candName,]]
w <- 1 / sum((dataPt - tr_feat[candName,])^2)
cand_scores[,tr_resp[candName,]] <- w + cand_scores[,tr_resp[candName,]]
w
rm(list = ls())
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
data_set_name <- "ionosphere"  # ionosphere | car | crx
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
cat("\014")
source("Prob2-KNN_Wrapper.R")
source("Prob2-KNN_Wrapper.R")
source("Prob2-KNN_Wrapper.R")
source("Prob2-KNN_Wrapper.R")
# Prob2-Commands.R: This script implements the KNN method and plot the errors
rm(list = ls())
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
data_set_name <- "crx"  # ionosphere | car | crx
title <- "Errors from Car Set with 1-norm as Distance Function"
numFold <- 5
neighborRange <- 1:20
cat("\014")
source("Prob2-KNN_Wrapper.R")
source("Prob2-KNN_Wrapper.R")
source("Prob2-KNN_Wrapper.R")
which(neighborRange, numNeighbor)
which(neighborRange == numNeighbor)
toupper
?toupper
toupper("car")
# Prob2-Commands.R: This script implements the KNN method and plot the errors
rm(list = ls())
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
data_set_name <- "crx"  # ionosphere | car | crx
dist_fcn_name <- "1-norm"
numFold <- 5
neighborRange <- 1:20
cat("\014")
source("Prob2-KNN_Wrapper.R")
# Prob2-Commands.R: This script implements the KNN method and plot the errors
rm(list = ls())
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
data_set_name <- "crx"  # ionosphere | car | crx
dist_fcn_name <- "1-norm"
numFold <- 5
neighborRange <- 1:2
cat("\014")
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# KNN
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
source("Prob2-KNN_Wrapper.R")
source("Prob2-Plots.R")
rm(j, numData_vld, tr_feat, vld_feat, tr_resp, vld_resp, vld_pred, dataPt, allDist, cand_names,
foldNo, folderPath, freqTable)
rm(numNeighbor, err_vec)
source("Prob2-Plots.R")
yRange <- NA
source("Prob2-Plots.R")
yRange <- c(1,3)
source("Prob2-Plots.R")
yRange <- c(0,3)
source("Prob2-Plots.R")
yRange <- c(0, 3)
source("Prob2-Plots.R")
yRange <- c(0, 2)
source("Prob2-Plots.R")
yRange <- c(0, 1)
source("Prob2-Plots.R")
yRange <- c(0, 0.25)
source("Prob2-Plots.R")
# Prob2-Commands.R: This script implements the KNN method and plot the errors
rm(list = ls())
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
# Settings
# ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
data_set_name <- "crx"  # ionosphere | car | crx
dist_fcn_name <- "1-norm"
numFold <- 5
neighborRange <- 1:2
cat("\014")
source("Prob2-KNN_Wrapper.R")
yRange <- c(0, 0.25)  # NULL for default y range in the graph
source("Prob2-Plots.R")
rm(list = ls())
